{
	"info": {
		"_postman_id": "ba2dc8b9-7119-4a21-803c-5bccd290b2c0",
		"name": "Accuknox-social",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36349991"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - refresh and access\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('refresh');\r",
									"  pm.expect(responseData).to.have.property('access');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Refresh token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.refresh).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Access token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.access).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json()\r",
									"pm.environment.set(\"token\",response.access); \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "John.Doe@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "JohnDoe@123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/auth/login/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"auth",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Username field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('username');",
									"});",
									"",
									"",
									"pm.test(\"Username field is an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.username).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Username array must contain at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Username array should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Johndoe123",
									"type": "text"
								},
								{
									"key": "password",
									"value": "JohnDoe@123",
									"type": "text"
								},
								{
									"key": "email",
									"value": "John.Doe@example.com",
									"type": "text"
								},
								{
									"key": "first_name",
									"value": "John",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "Doe",
									"type": "text"
								},
								{
									"key": "gender",
									"value": "male",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/auth/signup/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"auth",
								"signup",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Token Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - detail and code\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('detail');",
									"  pm.expect(responseData).to.have.property('code');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Detail and code are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Detail and code are of string data type\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.detail).to.be.a('string');",
									"    pm.expect(responseData.code).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/auth/token/refresh/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"auth",
								"token",
								"refresh",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "User Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Verify the 'q' parameter is correctly passed in the request URL\", function () {",
									"    const requestUrl = pm.request.url.toString();",
									"    ",
									"    pm.expect(requestUrl).to.include(\"q=am\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with the expected structure\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('email');",
									"        pm.expect(item).to.have.property('age');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "john.doe@gmail.com",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "Indore@123",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/users/search/?q=am",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users",
								"search",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "am"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Friend Requests",
			"item": [
				{
					"name": "Create Friend Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response body is in a valid JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "to_user",
									"value": "2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/api/request/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"request",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Pending Friend Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the appropriate Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/friend-requests/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"friend-requests",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept Friend Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'msg'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property(\"msg\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Msg field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Msg field should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response does not contain any additional unexpected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.only.have.keys('msg');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/friend-requests/1/accept/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"friend-requests",
								"1",
								"accept",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject Friend Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Error message is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response structure adheres to the API documentation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseURL}}/api/friend-requests/3/reject/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"friend-requests",
								"3",
								"reject",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Friends",
			"item": [
				{
					"name": "Friends List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.to.have.status(200));",
									"});",
									"",
									"",
									"pm.test(\"Response has the correct Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Response array should be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/friends/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"friends",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	]
}